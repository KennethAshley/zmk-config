/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"

#define XXX &none
#define ______ &trans

#define DEFAULT 0
#define NAV   1
#define SYM   2

#define HYP LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))
#define HYPER(key) LS(LC(LA(LG(key))))

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};
 
/ {

    behaviors {
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <21>;
        };
      };
      combos {
        compatible = "zmk,combos";
        combo_ESC {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp ESC>;
            layers = <0>;
        };
        combo_DEL {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp DEL>;
            layers = <0>;
        };
        combo_LGUI {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LGUI>;
            layers = <0>;
        };
        combo_LSHFLGUI {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LS(LGUI)>;
            layers = <0>;
        };
        combo_RGUI {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp RGUI>;
            layers = <0>;
        };
        combo_RCTRL {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RCTRL>;
            layers = <0>;
        };
        combo_RALT {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RALT>;
            layers = <0>;
        };
        combo_LALT {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LALT>;
            layers = <0>;
        };
    };
    macros {
        raycast: raycast {
            label = "ZM_raycast";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp SPACE>;
        };
    };

   
      keymap {
        compatible = "zmk,keymap"; 
        default_layer {
         
            // -----------------------------------------------------------------------------------------
            // ||  01  |  02  |  03  |  04  |  05  |   |  06  |  07   |  08  |  09  |  10  ||
            // ||  13  |  14  |  15  |  16  |  17  |   |  18  |  19   |  20  |  21  |  22  ||
            // ||  25  |  26  |  27  |  28  |  29  |   |  30  |  31   |  32  |  33  |  34  ||
            //              | KEN | NAV | BCK |   | SPC | SYM  | JILL 

            bindings = <
               ______ &kp Q       &kp W  &kp F &kp P &kp B   &kp J &kp L &kp U     &kp Y   &kp SQT        ______
               ______ &kp A       &kp R  &kp S &kp T &kp G   &kp M &kp N &kp E     &kp I   &kp O          ______
               ______ &mt LSHFT Z &kp X  &kp C &kp D &kp V   &kp K &kp H &kp COMMA &kp DOT &mt RSHFT FSLH ______
                               &kp LCTRL &mo NAV &kp SPACE   &kp BSPC &mo SYM &kp RGUI
            >;
         };
                   
         lower_layer {
         
            // -----------------------------------------------------------------------------------------
            // || ESC |     |     |     |     |   |     |     |     |     | CAP ||
            // || SPR | ALT | CTR | SHT |     |   | LFT | DWN | UP  | RGT | ENT ||
            // || UND | CUT | CPY |     | PST |   |     | TAB |     |     |     ||
            //              | GUI | LWR | BCK |   |     |     |     |

            bindings = <
               ______   &kp LG(Q)       &kp LG(W) &kp LG(F) &kp LG(P) &kp LG(B)   ______    &kp LG(L)  ______  ______    &caps_word  ______
               ______   &kp LG(A)       &kp LG(R) &kp LG(S) &kp LG(T) &swapper    &kp LEFT  &kp DOWN   &kp UP  &kp RIGHT &kp RET     ______
               ______   &mt LSHFT LG(Z) &kp LG(X) &kp LG(C) &kp LG(D) &kp LG(V)   &kp LG(K) &kp TAB    ______ ______     ______ ______
               &kp LGUI &mo 1 &kp SPACE                                 &raycast  &kp E  &kp N
            >;
         };

         raise_layer {
         
            // -----------------------------------------------------------------------------------------
            // ||  !  |  @  |  #  |  $  |  %  |   |  *  |  7  |  8  |  9  |  /  ||
            // ||  _  |  ;  |  [  |  (  |  {  |   |  -  |  4  |  5  |  6  |  +  ||
            // ||  `  |  :  |  ]  |  )  |  }  |   |  0  |  1  |  2  |  3  |  =  ||
            //              | GUI | LWR | BCK |   | SPC | RSE | ALT

            bindings = <
               ______ &kp EXCL  &kp AT   &kp HASH &kp DLLR &kp PRCNT   &kp KP_MULTIPLY &kp N7 &kp N8 &kp N9 &trans ______
               ______ &kp UNDER &kp COLON &kp LBKT &kp LPAR &kp LBRC      &kp MINUS &kp N4 &kp N5 &kp N6 &kp PLUS ______
               ______ &kp GRAVE &kp SEMI &kp RBKT &kp RPAR &kp RBRC      &kp N0 &kp N1 &kp N2 &kp N3 &kp EQUAL ______
               &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
            >;
         };
      };
};